package com.example.myplayer.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table "MEMO".
 */
public class MemoDao extends AbstractDao<Memo, Integer> {

    public static final String TABLENAME = "MEMO";

    public MemoDao(DaoConfig config) {
        super(config);
    }


    public MemoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /**
     * Creates the underlying database table.
     */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists ? "IF NOT EXISTS " : "";
        db.execSQL("CREATE TABLE " + constraint + "\"MEMO\" (" + //
                "\"ADDDATE\" INTEGER NOT NULL ," + // 0: adddate
                "\"ADDDAY\" INTEGER," + // 1: addday
                "\"ADDMONTH\" INTEGER," + // 2: addmonth
                "\"ADDYEAR\" INTEGER," + // 3: addyear
                "\"AT\" TEXT," + // 4: at
                "\"CONTENT\" TEXT," + // 5: content
                "\"ID\" INTEGER PRIMARY KEY ," + // 6: id
                "\"ISASYNCED\" INTEGER," + // 7: isasynced
                "\"LOC\" TEXT," + // 8: loc
                "\"PHOTO\" TEXT," + // 9: photo
                "\"UPDATEDATE\" INTEGER," + // 10: updatedate
                "\"USEREMAIL\" TEXT," + // 11: useremail
                "\"UUID\" TEXT);"); // 12: uuid
    }

    /**
     * Drops the underlying database table.
     */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"MEMO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Memo entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getAdddate().getTime());

        Integer addday = entity.getAddday();
        if (addday != null) {
            stmt.bindLong(2, addday);
        }

        Integer addmonth = entity.getAddmonth();
        if (addmonth != null) {
            stmt.bindLong(3, addmonth);
        }

        Integer addyear = entity.getAddyear();
        if (addyear != null) {
            stmt.bindLong(4, addyear);
        }

        String at = entity.getAt();
        if (at != null) {
            stmt.bindString(5, at);
        }

        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(6, content);
        }

        Integer id = entity.getId();
        if (id != null) {
            stmt.bindLong(7, id);
        }

        Boolean isasynced = entity.getIsasynced();
        if (isasynced != null) {
            stmt.bindLong(8, isasynced ? 1L : 0L);
        }

        String loc = entity.getLoc();
        if (loc != null) {
            stmt.bindString(9, loc);
        }

        String photo = entity.getPhoto();
        if (photo != null) {
            stmt.bindString(10, photo);
        }

        java.util.Date updatedate = entity.getUpdatedate();
        if (updatedate != null) {
            stmt.bindLong(11, updatedate.getTime());
        }

        String useremail = entity.getUseremail();
        if (useremail != null) {
            stmt.bindString(12, useremail);
        }

        String uuid = entity.getUuid();
        if (uuid != null) {
            stmt.bindString(13, uuid);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Memo entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getAdddate().getTime());

        Integer addday = entity.getAddday();
        if (addday != null) {
            stmt.bindLong(2, addday);
        }

        Integer addmonth = entity.getAddmonth();
        if (addmonth != null) {
            stmt.bindLong(3, addmonth);
        }

        Integer addyear = entity.getAddyear();
        if (addyear != null) {
            stmt.bindLong(4, addyear);
        }

        String at = entity.getAt();
        if (at != null) {
            stmt.bindString(5, at);
        }

        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(6, content);
        }

        Integer id = entity.getId();
        if (id != null) {
            stmt.bindLong(7, id);
        }

        Boolean isasynced = entity.getIsasynced();
        if (isasynced != null) {
            stmt.bindLong(8, isasynced ? 1L : 0L);
        }

        String loc = entity.getLoc();
        if (loc != null) {
            stmt.bindString(9, loc);
        }

        String photo = entity.getPhoto();
        if (photo != null) {
            stmt.bindString(10, photo);
        }

        java.util.Date updatedate = entity.getUpdatedate();
        if (updatedate != null) {
            stmt.bindLong(11, updatedate.getTime());
        }

        String useremail = entity.getUseremail();
        if (useremail != null) {
            stmt.bindString(12, useremail);
        }

        String uuid = entity.getUuid();
        if (uuid != null) {
            stmt.bindString(13, uuid);
        }
    }

    @Override
    public Integer readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6);
    }

    @Override
    public Memo readEntity(Cursor cursor, int offset) {
        Memo entity = new Memo( //
                new java.util.Date(cursor.getLong(offset + 0)), // adddate
                cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // addday
                cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // addmonth
                cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // addyear
                cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // at
                cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // content
                cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6), // id
                cursor.isNull(offset + 7) ? null : cursor.getShort(offset + 7) != 0, // isasynced
                cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // loc
                cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // photo
                cursor.isNull(offset + 10) ? null : new java.util.Date(cursor.getLong(offset + 10)), // updatedate
                cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // useremail
                cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12) // uuid
        );
        return entity;
    }

    @Override
    public void readEntity(Cursor cursor, Memo entity, int offset) {
        entity.setAdddate(new java.util.Date(cursor.getLong(offset + 0)));
        entity.setAddday(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setAddmonth(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setAddyear(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setAt(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setContent(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setId(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
        entity.setIsasynced(cursor.isNull(offset + 7) ? null : cursor.getShort(offset + 7) != 0);
        entity.setLoc(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setPhoto(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setUpdatedate(cursor.isNull(offset + 10) ? null : new java.util.Date(cursor.getLong(offset + 10)));
        entity.setUseremail(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setUuid(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
    }

    @Override
    protected final Integer updateKeyAfterInsert(Memo entity, long rowId) {
        return entity.getId();
    }

    @Override
    public Integer getKey(Memo entity) {
        if (entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Memo entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }

    /**
     * Properties of entity Memo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Adddate = new Property(0, java.util.Date.class, "adddate", false, "ADDDATE");
        public final static Property Addday = new Property(1, Integer.class, "addday", false, "ADDDAY");
        public final static Property Addmonth = new Property(2, Integer.class, "addmonth", false, "ADDMONTH");
        public final static Property Addyear = new Property(3, Integer.class, "addyear", false, "ADDYEAR");
        public final static Property At = new Property(4, String.class, "at", false, "AT");
        public final static Property Content = new Property(5, String.class, "content", false, "CONTENT");
        public final static Property Id = new Property(6, Integer.class, "id", true, "ID");
        public final static Property Isasynced = new Property(7, Boolean.class, "isasynced", false, "ISASYNCED");
        public final static Property Loc = new Property(8, String.class, "loc", false, "LOC");
        public final static Property Photo = new Property(9, String.class, "photo", false, "PHOTO");
        public final static Property Updatedate = new Property(10, java.util.Date.class, "updatedate", false, "UPDATEDATE");
        public final static Property Useremail = new Property(11, String.class, "useremail", false, "USEREMAIL");
        public final static Property Uuid = new Property(12, String.class, "uuid", false, "UUID");
    }

}
